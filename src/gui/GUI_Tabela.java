package gui;

import proposicao.Argumento;
import proposicao.ArgumentoComposto;
import proposicao.ArgumentoSimples;
import util.Solver;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

public class GUI_Tabela  extends javax.swing.JFrame {
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabela_verdade;
        /**
         * Creates new form telaTabelaVerdade
         */
        public GUI_Tabela() {
            initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        private void initComponents() {

            jScrollPane1 = new javax.swing.JScrollPane();
            tabela_verdade = new javax.swing.JTable();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            tabela_verdade.setAlignmentX(tabela_verdade.CENTER_ALIGNMENT);

            this.geraTabela();
            tabela_verdade.setAutoscrolls(false);
            jScrollPane1.setViewportView(tabela_verdade);
            tabela_verdade.getAccessibleContext().setAccessibleDescription("");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 412, Short.MAX_VALUE)
                                    .addContainerGap())
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                                    .addContainerGap())
            );

            pack();
        }

    public void geraTabela(){

        String[] args = GUI_Argumento.argumento.substring(2, GUI_Argumento.argumento.length()-2).split(" ");

        Object[][] resp = new Object[Solver.respostaFinal.length][args.length];

        Map<Argumento, boolean[]> respostas = Solver.respostas;
        List<Argumento> keys = Solver.argumentos;

        System.out.println(keys.size());

        for (int i = 0; i < keys.size(); i++) {
            Argumento key = keys.get(i);
            if(key instanceof ArgumentoSimples) {

                for (int il=0; il<args.length; il++) {
                    if (args[il].equals((String.valueOf(((ArgumentoSimples) key).getP())))) {

                        boolean[] resp_nova = respostas.get(key);

                        if(key.not){
                            resp_nova = nega_array(resp_nova);
                        }
                        for (int j = 0; j < resp.length; j++) {

                            if(resp[j][il] == null){
                                resp[j][il] = resp_nova[j];
                            }else break; //caso já tenha inserido neste local

                        }
                    }
                    if(key.not && args[il].equals("~")){
                            for (int j = 0; j < resp.length; j++) {

                                if(resp[j][il] == null){
                                    resp[j][il] = respostas.get(key)[j];
                                }else break; //caso já tenha inserido neste local

                            }
                    }
                }


            }else{
                for (int il=0; il<args.length; il++) {
                    if(args[il].equals(((ArgumentoComposto) key).getConec())){
                        for (int j = 0; j < resp.length; j++) {
                            if(resp[j][il] == null){
                                resp[j][il] = respostas.get(key)[j];
                            }else break; //caso já tenha inserido neste local
                        }
                    }

                }
            }
        }

        tabela_verdade.setModel(new javax.swing.table.DefaultTableModel(
                resp,
                args
        ));

    }

    public boolean[] nega_array(boolean[] respostas){
        boolean[] novas_respostas = respostas.clone();

        for (int i = 0; i < respostas.length; i++) {
            novas_respostas[i] = !respostas[i];
        }
        return novas_respostas;
    }
}
